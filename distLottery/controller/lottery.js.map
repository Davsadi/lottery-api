{"version":3,"sources":["../../src/controller/lottery.js"],"names":["config","db","api","use","req","res","next","header","get","post","newLottery","gameType","body","drawDate","standardNumbers","bonusNumber","save","err","send","json","id","find","lotterys","sort","mynumbers","findById","params","lottery","put","myNumbers","push","message","delete","status","remove","_id","newMyNumbers","console","log","matchedNumbers","undefined","matchedBonus","checkedYet"],"mappings":"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","file":"lottery.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport Lottery from '../model/lottery';\nimport MyNumbers from '../model/mynumbers';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n    let api = Router();\n\n\n    api.use(function(req, res, next) {\n      res.header('Access-Control-Allow-Origin', req.get('Origin') || '*');\n      res.header('Access-Control-Allow-Credentials', 'true');\n      res.header('Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE');\n      res.header('Access-Control-Expose-Headers', 'Content-Length');\n      res.header('Access-Control-Allow-Headers', 'Accept, Authorization, Content-Type, X-Requested-With, Range');\n      return next();\n  });\n\n\n\n    // CRUD - Create Read Update Delete\n\n\n\n\n\n    // '/v1/lottery/add' - Create\n    api.post('/add', authenticate, (req, res) => {\n        let newLottery = new Lottery();\n        newLottery.gameType = req.body.gameType;\n        newLottery.drawDate = req.body.drawDate;\n        newLottery.standardNumbers = req.body.standardNumbers;\n        newLottery.bonusNumber = req.body.bonusNumber;\n        newLottery.save(err => {\n            if (err) {\n                res.send(err);\n            }\n            //res.json({ message: \"Lottery saved successfully\" });\n            res.json(newLottery.id);\n        });\n    });\n\n    // '/v1/lottery/' - Read\n    //Get all lotteries\n    api.get('/', (req, res) => {\n        Lottery.find({}, (err, lotterys) => {\n            if (err) {\n                res.send(err);\n            }\n            //res.header(\"Access-Control-Allow-Origin\", \"*\");\n            //res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With, Content-Type, Accept\");\n            //res.header(\"Access-Control-Allow-Methods\", \"POST, GET\");\n            res.json(lotterys);\n        });\n    });\n\n    // '/v1/lottery/latest' - Read\n    //Get latest lottery numbers\n    api.get('/latest', (req, res) => {\n        Lottery.find({}.sort({\"drawDate\": -1}), (err, lotterys) => {\n            if (err) {\n                res.send(err);\n            }\n            //res.header(\"Access-Control-Allow-Origin\", \"*\");\n            //res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With, Content-Type, Accept\");\n            //res.header(\"Access-Control-Allow-Methods\", \"POST, GET\");\n            res.json(lotterys);\n        });\n    });\n\n    // '/v1/lottery/mynumbers' - Read\n    //Get all my numbers\n    api.get('/mynumbers/', (req, res) => {\n        MyNumbers.find({}, (err, mynumbers) => {\n            if (err) {\n                res.send(err);\n            }\n            res.json(mynumbers);\n        });\n    });\n\n    // '/v1/lottery/:id' - Read\n    //Get one lottery\n    api.get('/:id', (req, res) => {\n        Lottery.findById(req.params.id, (err, lottery) => {\n            if (err) {\n                res.send(err);\n            }\n            res.json(lottery);\n        });\n    });\n\n    // '/v1/lottery/:id' - Update\n    api.put('/:id', authenticate, (req, res) => {\n        Lottery.findById(req.params.id, (err, lottery) => {\n            if (err) {\n                res.send(err);\n            }\n            lottery.gameType = req.body.gameType;\n            lottery.drawDate = req.body.drawDate;\n            lottery.standardNumbers = req.body.standardNumbers;\n            lottery.bonusNumber = req.body.bonusNumber;\n            lottery.myNumbers.push(req.body.myNumbers);\n            lottery.save(err => {\n                if (err) {\n                    res.send(err);\n                }\n                res.json({ message: \"Lottery updated successfully\" });\n            });\n        });\n    });\n\n    // '/v1/lottery/:id' - Delete\n    api.delete('/:id', authenticate, (req, res) => {\n        Lottery.findById(req.params.id, (err, lottery) => {\n            if (err) {\n                res.status(500).send(err);\n                return;\n            }\n            if (lottery === null) {\n                res.status(404).send(\"Lottery not found\");\n                return;\n            }\n            Lottery.remove({\n                _id: req.params.id\n            }, (err, lottery) => {\n                if (err) {\n                    res.status(500).send(err);\n                    return;\n                }\n                MyNumbers.remove({\n                    lottery: req.params.id\n                }, (err, mynumbers) => {\n                    if (err) {\n                        res.send(err);\n                    }\n                    res.json({ message: \"Lottery successfully removed!\"});\n                    });\n                });\n            });\n        });\n\n        // '/v1/lottery/mynumbers/add' - Create\n        api.post('/mynumbers/add', authenticate, (req, res) => {\n            let newMyNumbers = new MyNumbers();\n\n            newMyNumbers.gameType = req.body.gameType;\n            newMyNumbers.drawDate = req.body.drawDate;\n            newMyNumbers.standardNumbers = req.body.standardNumbers;\n            newMyNumbers.bonusNumber = req.body.bonusNumber;\n\n            //console.log(req.body);\n\n            newMyNumbers.save((err, mynumbers) => {\n                if (err) {\n                    res.send(err);\n                    console.log(err);\n                }\n                //console.log(res.sendStatus());\n                res.json({ message: \"My Numbers saved successfully\" });\n            });\n        });\n\n\n\n    // Update mynumbers to tie to specific lottery (once winning numbers are scraped)\n    // '/v1/lottery/mynumbers/:id'\n    api.put('/mynumbers/:id', authenticate, (req, res) => {\n        MyNumbers.findById(req.params.id, (err, mynumbers) => {\n            if (err) {\n                res.send(err);\n            }\n            mynumbers.gameType = req.body.gameType;\n            mynumbers.drawDate = req.body.drawDate;\n            mynumbers.standardNumbers = req.body.standardNumbers;\n            mynumbers.bonusNumber = req.body.bonusNumber;\n            if (req.body.matchedNumbers !== undefined){\n                mynumbers.matchedNumbers.push(req.body.matchedNumbers);\n            }\n            mynumbers.matchedBonus = req.body.matchedBonus;\n            mynumbers.checkedYet = req.body.checkedYet;\n            mynumbers.lottery = req.body.lottery;\n\n            mynumbers.save(err => {\n                if (err) {\n                    res.send(err);\n                }\n                res.json({ message: \"My Numbers updated successfully\" });\n            });\n        });\n    });\n\n\n\n    // Get all mynumbers for a specific lottery ID\n    // '/v1/lottery/mynumbers/:id'\n    api.get('/mynumbers/:id', (req, res) => {\n        MyNumbers.find({lottery: req.params.id}, (err, mynumbers) => {\n            if (err) {\n                res.send(err);\n            }\n            res.json(mynumbers);\n        });\n    });\n\n    return api;\n}\n"]}